name: nff_web_build_and_deploy

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - develop # TEMP!
    paths:
      - "web/**"
      - ".github/workflows/nff_web_build_and_deploy.yaml"

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      WEB_IMAGE_TAG: ${{ secrets.DOCKERHUB_USERNAME }}/nff-web-prd:${{ github.sha }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          sparse-checkout: web/

      - name: Docker login
        run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Build project image
        working-directory: ./web
        run: docker build -t $WEB_IMAGE_TAG .

      - name: Push image to Docker Hub
        run: |
          docker push $WEB_IMAGE_TAG
  migrate:
    needs: build
    runs-on: ubuntu-latest
    env:
      RDS_DB_URL: ${{ secrets.RDS_DB_URL }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          sparse-checkout: web/database/migrations/

      - name: Setup goose
        uses: mscno/setup-goose@v1

      - name: Apply migrations
        run: |
          goose -dir ./web/database/migrations -v -s postgres $RDS_DB_URL up

  migrate_turso:
    needs: build
    runs-on: ubuntu-latest
    env:
      TURSO_DATABASE_URL: ${{ secrets.TURSO_DATABASE_URL }}
      TURSO_AUTH_TOKEN: ${{ secrets.TURSO_AUTH_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          sparse-checkout: migrations/

      - name: Setup Go Faster
        uses: WillAbides/setup-go-faster@v1.14.0
        with:
          go-version: v1.23

      - name: Apply migrations
        run: |
          make run up TURSO_DATABASE_URL=$TURSO_DATABASE_URL TURSO_AUTH_TOKEN=$TURSO_AUTH_TOKEN

  deploy:
    needs:
      - build
      - migrate
    runs-on: ubuntu-latest
    env:
      WEB_IMAGE_TAG: ${{ secrets.DOCKERHUB_USERNAME }}/nff-web-prd:${{ github.sha }}
      PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
      HOSTNAME: ${{ secrets.EC2_SSH_HOST_2 }}
      USER_NAME: ${{ secrets.EC2_USER_NAME }}
      RDS_DB_URL: ${{ secrets.RDS_DB_URL }}
      ELASTICACHE_URL: ${{ secrets.ELASTICACHE_URL }}
      SS_API_BASE_URL: ${{ secrets.SS_API_BASE_URL }}
      TURSO_DATABASE_URL: ${{ secrets.TURSO_DATABASE_URL }}
      TURSO_AUTH_TOKEN: ${{ secrets.TURSO_AUTH_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          sparse-checkout: web/nginx/

      - name: Set up SSH
        run: |
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem

      - name: Transfer Nginx Conf to EC2
        run: |
          scp -o StrictHostKeyChecking=no -i private_key.pem ./web/nginx/nginx.conf ${USER_NAME}@${HOSTNAME}:/home/${USER_NAME}/

      - name: Connect to EC2 instance and deploy
        run: |
          ssh -o StrictHostKeyChecking=no -i private_key.pem ${USER_NAME}@${HOSTNAME} "
            # Remove any running container, image, volume or network
            docker system prune -af --volumes &&
            docker ps -q | xargs -r docker stop &&
            docker ps -q | xargs -r docker rm &&
            docker network prune --force &&

            docker network create nff-network &&

            # Run nff containers
            docker run \
              --network nff-network \
              --rm \
              --detach \
              --name nff-web_1 \
              -e PORT=8080 \
              -e START_FRESH=true \
              -e TZ=America/Sao_Paulo \
              -e TURSO_DATABASE_URL=$TURSO_DATABASE_URL \
              -e TURSO_AUTH_TOKEN=$TURSO_AUTH_TOKEN \
              -e DB_URL=$RDS_DB_URL \
              -e REDIS_URL=$ELASTICACHE_URL \
              -e SS_API_BASE_URL=$SS_API_BASE_URL \
              $WEB_IMAGE_TAG &&
            docker run \
              --network nff-network \
              --rm \
              --detach \
              --name nff-web_2 \
              -e PORT=8080 \
              -e START_FRESH=true \
              -e TZ=America/Sao_Paulo \
              -e TURSO_DATABASE_URL=$TURSO_DATABASE_URL \
              -e TURSO_AUTH_TOKEN=$TURSO_AUTH_TOKEN \
              -e DB_URL=$RDS_DB_URL \
              -e REDIS_URL=$ELASTICACHE_URL \
              -e SS_API_BASE_URL=$SS_API_BASE_URL \
              $WEB_IMAGE_TAG &&

            # Run Nginx container
            docker run \
              --network nff-network \
              --rm \
              --detach \
              --name nff-nginx \
              -p 80:80 \
              -p 443:443 \
              -v /home/${USER_NAME}/nginx.conf:/etc/nginx/nginx.conf:ro \
              -v /etc/letsencrypt:/etc/letsencrypt:ro \
              nginx:alpine
          "
      - name: Clean up private key
        run: rm private_key.pem

name: nff_web_build_and_deploy

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - develop # TEMP!
    paths:
      - "web/**"
      - ".github/workflows/nff_web_build_and_deploy.yaml"

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      WEB_IMAGE_TAG: ${{ secrets.DOCKERHUB_USERNAME }}/nff-web-prd:${{ github.sha }}
      MIGRATIONS_IMAGE_TAG: ${{ secrets.DOCKERHUB_USERNAME }}/nff-web-prd-goose:${{ github.sha }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Docker login
        run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Build project image
        working-directory: ./web
        run: docker build -t $WEB_IMAGE_TAG .

      - name: Build goose image
        working-directory: ./web
        run: docker build -t $MIGRATIONS_IMAGE_TAG -f Dockerfile.goose .

      - name: Push images to Docker Hub
        run: |
          docker push $WEB_IMAGE_TAG
          docker push $MIGRATIONS_IMAGE_TAG

  migrate:
    needs: build
    runs-on: ubuntu-latest
    env:
      MIGRATIONS_IMAGE_TAG: ${{ secrets.DOCKERHUB_USERNAME }}/nff-web-prd-goose:${{ github.sha }}
      RDS_DB_URL: ${{ secrets.RDS_DB_URL }}
    steps:
      - name: Apply migrations
        run: docker run -e CMD=up -e DB_URL=$RDS_DB_URL $MIGRATIONS_IMAGE_TAG

  deploy:
    needs:
      - build
      - migrate
    runs-on: ubuntu-latest
    env:
      WEB_IMAGE_TAG: ${{ secrets.DOCKERHUB_USERNAME }}/nff-web-prd:${{ github.sha }}
      PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
      HOSTNAME: ${{ secrets.EC2_SSH_HOST }}
      USER_NAME: ${{ secrets.EC2_USER_NAME }}
      RDS_DB_URL: ${{ secrets.RDS_DB_URL }}
      ELASTICACHE_URL: ${{ secrets.ELASTICACHE_URL }}
      SS_API_BASE_URL: ${{ secrets.SS_API_BASE_URL }}
    steps:
      - name: Set up SSH
        run: |
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem

      - name: Connect to EC2 instance and deploy
        run: |
          ssh -o StrictHostKeyChecking=no -i private_key.pem ${USER_NAME}@${HOSTNAME} "
            sudo docker system prune -af --volumes &&
            sudo docker ps -q | xargs -r sudo docker stop &&
            sudo docker ps -q | xargs -r sudo docker rm &&
            sudo docker run \
              --rm \
              --detach \
              --name nff-web \
              -p 80:8080 \
              -p 8080:8080 \
              -e PORT=8080 \
              -e START_FRESH=true \
              -e DB_URL=$RDS_DB_URL \
              -e REDIS_URL=$ELASTICACHE_URL \
              -e SS_API_BASE_URL=$SS_API_BASE_URL \
              $WEB_IMAGE_TAG &&
            sudo docker system prune -af --volumes
          "

      - name: Clean up private key
        run: rm private_key.pem

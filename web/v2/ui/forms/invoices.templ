package forms

import "github.com/cayo-rodrigues/nff/web/models"
import "strconv"
import "github.com/cayo-rodrigues/nff/web/ui/shared"
import "fmt"

templ InvoiceForm(i *models.Invoice, entities []*models.Entity) {
	<form id="invoice-form">
		<div class="gap-6 border-b border-gray-300 py-2 outline-0">
			<div
				hx-post="/invoices/create"
				hx-target="#requests-overview-wrapper"
				hx-swap="outerHTML"
				hx-include="[id='from_date'], [id='to_date']"
				class="lg:w-fit"
			>
				@shared.SubmitButton("sm") {
					@shared.Icon("play-circle")
					<span>Iniciar Operação</span>
				}
			</div>
		</div>
		<div class="grid grid-cols-1 gap-4 py-4 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 2xl:grid-cols-6">
			<div class="flex flex-col gap-2">
				<label for="sender"><strong>Remetente</strong></label>
				<select
					hx-get="/invoices/form/get-sender-ie-input"
					hx-trigger="change"
					hx-target="#available-ies"
					hx-select="#available-ies"
					hx-swap="outerHTML"
					class="h-10 rounded border border-gray-300 bg-white p-2 outline-0 focus-within:border-gray-500"
					id="sender"
					name="sender"
				>
					for _, e := range entities {
						<option value={ strconv.Itoa(e.ID) }>{ e.Name }</option>
					}
				</select>
				<sub class="text-red-600">{ i.Errors["Sender"] }</sub>
			</div>
			@SenderIeInput(i.Sender, i.SenderIe)
			<div class="flex flex-col gap-2">
				<label for="recipient"><strong>Destinatário</strong></label>
				<select class="h-10 rounded border border-gray-300 bg-white p-2 outline-0 focus-within:border-gray-500" id="recipient" name="recipient">
					for _, e := range entities {
						<option value={ strconv.Itoa(e.ID) }>{ e.Name }</option>
					}
				</select>
				<sub class="text-red-600">{ i.Errors["Recipient"] }</sub>
			</div>
			<div class="flex flex-col gap-2">
				<label for="operation"><strong>Operação</strong></label>
				<select class="h-10 rounded border border-gray-300 bg-white p-2 outline-0 focus-within:border-gray-500" id="operation" name="operation">
					for _, operation := range models.InvoiceOperations {
						<option
							value={ operation }
							if operation == i.Operation {
								selected
							}
						>
							{ operation }
						</option>
					}
				</select>
				<sub class="text-red-600">{ i.Errors["Operation"] }</sub>
			</div>
			<div class="flex flex-col gap-2">
				<label for="cfop"><strong>CFOP</strong></label>
				<select class="h-10 rounded border border-gray-300 bg-white p-2 outline-0 focus-within:border-gray-500" id="cfop" name="cfop">
					for _, cfop := range models.InvoiceCfops {
						<option
							value={ strconv.Itoa(cfop) }
							if cfop == i.Cfop {
								selected
							}
						>
							{ strconv.Itoa(cfop) }
						</option>
					}
				</select>
				<sub class="text-red-600">{ i.Errors["Cfop"] }</sub>
			</div>
			<div class="flex flex-col gap-2">
				<label class="truncate" for="is_icms_contributor"><strong>Contribuinte ICMS</strong></label>
				<select class="h-10 rounded border border-gray-300 bg-white p-2 outline-0 focus-within:border-gray-500" id="is_icms_contributor" name="is_icms_contributor">
					for _, status := range models.InvoiceIcmsOptions {
						<option
							value={ status }
							if status == i.IsIcmsContributor {
								selected
							}
						>
							{ status }
						</option>
					}
				</select>
				<sub class="text-red-600">{ i.Errors["IsIcmsContributor"] }</sub>
			</div>
			<div class="flex flex-col gap-2">
				<label class="truncate" for="is_final_customer"><strong>Consumidor Final</strong></label>
				<select class="h-10 rounded border border-gray-300 bg-white p-2 outline-0 focus-within:border-gray-500" id="is_final_customer" name="is_final_customer">
					for _, status := range models.InvoiceBooleanField {
						<option
							value={ status }
							if status == i.IsFinalCustomer {
								selected
							}
						>
							{ status }
						</option>
					}
				</select>
				<sub class="text-red-600">{ i.Errors["IsFinalCustomer"] }</sub>
			</div>
			<div class="flex flex-col gap-2">
				<label for="shipping"><strong>Frete</strong></label>
				<input
					class="rounded border border-gray-300 bg-white p-2 outline-0 focus-within:border-gray-500 md:w-full"
					type="number"
					step="0.01"
					id="shipping"
					name="shipping"
					value="{{ .Invoice.Shipping }}"
				/>
				<sub class="text-red-600">{ i.Errors["Shipping"] }</sub>
			</div>
			<div class="flex flex-col gap-2">
				<label class="truncate" for="add_shipping_to_total"><strong>Adicionar Frete ao Total</strong></label>
				<select
					class="h-10 rounded border border-gray-300 bg-white p-2 outline-0 focus-within:border-gray-500 md:w-full"
					id="add_shipping_to_total"
					name="add_shipping_to_total"
				></select>
				<sub class="text-red-600">{ i.Errors["AddShippingToTotal"] }</sub>
			</div>
			<div class="flex flex-col gap-2">
				<label for="gta"><strong>GTA</strong></label>
				<input class="rounded border border-gray-300 bg-white p-2 outline-0 focus-within:border-gray-500 md:w-full" type="text" id="gta" name="gta" value={ i.Gta }/>
				<sub class="text-red-600">{ i.Errors["Gta"] }</sub>
			</div>
			<div class="flex flex-col gap-2">
				<label class="truncate" for="extra_notes"><strong>Informações complementares</strong></label>
				<input class="rounded border border-gray-300 bg-white p-2 outline-0 focus-within:border-gray-500 md:w-full" type="text" id="extra_notes" name="extra_notes" value={ i.ExtraNotes }/>
				<sub class="text-red-600">{ i.Errors["ExtraNotes"] }</sub>
			</div>
			<div class="flex flex-col gap-2">
				<label class="truncate" for="custom_file_name"><strong>Nome do arquivo</strong></label>
				<input class="rounded border border-gray-300 bg-white p-2 outline-0 focus-within:border-gray-500 md:w-full" type="text" id="custom_file_name" name="custom_file_name" value={ i.CustomFileNamePrefix }/>
				<sub class="text-red-600">{ i.Errors["CustomFileNamePrefix"] }</sub>
			</div>
		</div>
		@InvoiceItemsHeading(i)
		<div class="grid grid-cols-1 gap-3">
			for idx, item := range i.Items {
				@InvoiceItemSection(item, idx+1)
			}
		</div>
	</form>
}

templ InvoiceItemsHeading(i *models.Invoice) {
	<heading id="invoice-items-heading" class="sticky top-0 z-10 mb-2 border-b border-gray-200 bg-gray-50 px-2 py-2 sm:flex sm:items-center sm:justify-between">
		<div class="py-2">
			<h3 class="text-lg font-bold">Produtos</h3>
		</div>
		<div class="flex items-center gap-6 py-2">
			<div
				hx-get="/invoices/items/form-section"
				hx-target="#invoice-items-dialog"
				hx-swap="beforeend"
				hx-trigger="click"
			>
				@shared.DefaultButtonOutline("sm") {
					@shared.IconXs("plus")
				}
			</div>
			<strong>Total de itens:</strong>
			<span id="items-count">{ strconv.Itoa(len(i.Items)) }</span>
		</div>
	</heading>
}

templ InvoiceItemSection(item *models.InvoiceItem, idx int) {
	<section id={ fmt.Sprintf("item-%d", idx) } class="rounded border border-gray-600 transition hover:border-gray-700">
		<div class="flex items-center justify-between border-b border-gray-600 bg-gray-600 p-2">
			<h3 class="text-base font-medium text-white">Produto { strconv.Itoa(idx) }</h3>
			<div class="flex items-center justify-end gap-2">
				<div onclick="duplicateItemSection(this.closest('section'))">
					@shared.InfoButton("xs") {
						@shared.IconXs("copy")
					}
				</div>
				<div onclick="removeItemSection(this.closest('section'))">
					@shared.DefaultButton("xs") {
						@shared.IconXs("trash-2")
					}
				</div>
			</div>
		</div>
		<div class="grid grid-cols-1 gap-4 rounded-b bg-white p-2 pt-4 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 2xl:grid-cols-7">
			@shared.SelectInput(&shared.InputData{
				ID:      "group",
				Label:   "Grupo",
				Value:   item.Group,
				ErrMsg:  item.Errors["Group"],
				Options: models.InvoiceItemGroups[:],
			})
			@shared.Input(&shared.InputData{
				ID:     "ncm",
				Label:  "NCM",
				Value:  item.NCM,
				ErrMsg: item.Errors["NCM"],
			})
			@shared.Input(&shared.InputData{
				ID:     "description",
				Label:  "Description",
				Value:  item.Description,
				ErrMsg: item.Errors["Description"],
			})
			@shared.Input(&shared.InputData{
				ID:        "quantity",
				Label:     "Quantidade",
				Value:     strconv.FormatFloat(item.Quantity, 'f', 2, 64),
				ErrMsg:    item.Errors["Quantity"],
				InputType: "number",
				Step:      "0.01",
			})
			@shared.Input(&shared.InputData{
				ID:        "value_per_unity",
				Label:     "ValuePerUnity",
				Value:     strconv.FormatFloat(item.ValuePerUnity, 'f', 2, 64),
				ErrMsg:    item.Errors["ValuePerUnity"],
				InputType: "number",
				Step:      "0.01",
			})
			@shared.SelectInput(&shared.InputData{
				ID:      "origin",
				Label:   "Origem",
				Value:   item.Origin,
				ErrMsg:  item.Errors["Origin"],
				Options: models.InvoiceItemOrigins[:],
			})
			@shared.SelectInput(&shared.InputData{
				ID:      "unity_of_measurement",
				Label:   "Unidade de Medida",
				Value:   item.UnityOfMeasurement,
				ErrMsg:  item.Errors["UnityOfMeasurement"],
				Options: models.InvoiceItemUnitiesOfMeaasurement[:],
			})
		</div>
	</section>
}

templ SenderIeInput(e *models.Entity, invoiceSenderIe string) {
	<div id="available-ies" class="flex flex-col gap-2">
		<label class="truncate" for="sender_ie"><strong>IE do Remetente</strong></label>
		<select class="h-10 rounded border border-gray-300 bg-white p-2 outline-0 focus-within:border-gray-500 md:w-full" id="sender_ie" name="sender_ie">
			for _, ie := range e.AllIes() {
				<option
					value={ ie }
					if ie == invoiceSenderIe {
						selected
					}
				>
					{ ie }
				</option>
			}
		</select>
		<sub class="text-red-600"></sub>
	</div>
}

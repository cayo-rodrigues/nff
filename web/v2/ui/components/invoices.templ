package components

import "github.com/cayo-rodrigues/nff/web/models"
import "fmt"
import "github.com/cayo-rodrigues/nff/web/ui/shared"
import "github.com/cayo-rodrigues/nff/web/ui/scripts"
import "strconv"
import "github.com/cayo-rodrigues/nff/web/utils"

templ InvoiceList(invoices []*models.Invoice) {
	<ul id="invoice-list" class="grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-3 2xl:grid-cols-5">
		for _, invoice := range invoices {
			@InvoiceCard(invoice)
		}
	</ul>
}

templ InvoiceStatus(i *models.Invoice) {
	switch i.ReqStatus {
		case "success":
			<div class="text-green-600">
				@shared.Icon("check-circle")
			</div>
			<span>Sucesso</span>
		case "warning":
			<div class="text-yellow-600">
				@shared.Icon("alert-triangle")
			</div>
			<span>Aviso</span>
		case "error":
			<div class="text-red-600">
				@shared.Icon("x-circle")
			</div>
			<span>Erro </span>
		default:
			<div class="animate-spin-slow text-sky-600">
				@shared.Icon("loader")
			</div>
			<span>Em andamento... </span>
	}
}

templ InvoiceCard(i *models.Invoice) {
	<li
		id={ invoiceCardID(i) }
		class="relative cursor-pointer rounded border border-gray-200 bg-white p-2 shadow shadow-gray-300 transition hover:shadow-gray-400"
	>
		<h3 class="flex items-center gap-2 truncate rounded border border-gray-300 p-2 text-base font-bold">
			@InvoiceStatus(i)
		</h3>
		<ul class="flex flex-col gap-1 p-2 pb-0 sm:w-10/12 md:w-9/12">
			<li class="md:truncate"><span class="font-medium">Número:</span> { i.Number } </li>
			<li class="md:truncate"><span class="font-medium">Remetente:</span> { i.Sender.Name }</li>
			<li class="md:truncate"><span class="font-medium">Destinatário:</span> { i.Recipient.Name }</li>
		</ul>
		<div class="grid grid-cols-6 gap-2 p-2 sm:absolute sm:bottom-2 sm:right-2 sm:grid-cols-2 sm:p-0">
			<div onclick={ scripts.OpenDialogWithEvent(invoiceDetailsTarget(i), invoiceItemsEvent(i)) } title="Ver detalhes">
				@shared.WarningButton("xs") {
					@shared.IconSm("eye")
				}
			</div>
			<a title="Usar como modelo">
				@shared.InfoButton("xs") {
					@shared.IconSm("edit")
				}
			</a>
			<div title="Baixar">
				@shared.DefaultButton("xs") {
					@shared.IconSm("download-cloud")
				}
			</div>
			<div title="Cancelar NFA">
				@shared.ErrorButton("xs") {
					@shared.IconSm("slash")
				}
			</div>
		</div>
		@InvoiceDetails(i)
	</li>
}

templ InvoiceDetails(i *models.Invoice) {
	<dialog id={ invoiceDetailsID(i) } class="w-full rounded sm:w-10/12 md:w-9/12 lg:w-7/12 xl:w-6/12 2xl:w-5/12">
		<div class="rounded border border-gray-200 p-2 shadow shadow-gray-300">
			<div class="relative rounded border border-gray-300 p-2">
				<h3 class="flex items-center gap-2 break-words rounded text-base font-bold">
					@InvoiceStatus(i)
				</h3>
				<div
					class="absolute -right-2 -top-2 rounded-full bg-white pb-1 pl-1 transition hover:bg-gray-100 active:bg-gray-200 sm:p-1"
					onclick={ scripts.CloseDialog(invoiceDetailsTarget(i)) }
				>
					@shared.Icon("x-circle")
				</div>
			</div>
			if i.ReqStatus != "pending" {
				<div class="border-b p-2 text-base">
					<pre>{ i.ReqMsg }</pre>
				</div>
			}
			<ul class="grid gap-2 p-2 sm:grid-cols-2">
				<li><span class="font-medium">Número:</span> { i.Number }</li>
				<li><span class="font-medium">Protocolo:</span> { i.Protocol }</li>
				<li><span class="font-medium">Remetente:</span> { i.Sender.Name }</li>
				<li><span class="font-medium">IE do Remetente:</span> { i.SenderIe }</li>
				<li><span class="font-medium">Destinatário:</span> { i.Recipient.Name }</li>
				<li><span class="font-medium">Operação:</span> { i.Operation }</li>
				<li><span class="font-medium">CFOP:</span> { strconv.Itoa(i.Cfop) }</li>
				<li><span class="font-medium">Contribuinte ICMS:</span> { i.IsIcmsContributor }</li>
				<li><span class="font-medium">Consumidor Final:</span> { i.IsFinalCustomer }</li>
				<li><span class="font-medium">Frete:</span> { utils.Float64ToString(i.Shipping) } </li>
				<li><span class="font-medium">Adicionar Frete ao Total:</span> { i.AddShippingToTotal } </li>
				<li><span class="font-medium">GTA:</span> { i.Gta } </li>
				<li><span class="font-medium">Nome do Arquivo:</span> { i.FileName } </li>
			</ul>
			@InvoiceItemsDetails(i)
		</div>
	</dialog>
}

templ InvoiceItemsDetails(i *models.Invoice) {
	<div id={ invoiceItemsDetailsID(i) }>
		<div class="mt-2 border-t p-2">
			<h4 class="flex items-center justify-between text-lg">
				<span>Produtos</span>
				if len(i.Items) != 0 {
					<div class="flex gap-2 px-2">
						<span class="text-base font-medium">Total:</span>
						<span class="text-base">{ strconv.Itoa(len(i.Items)) }</span>
					</div>
				}
			</h4>
			if len(i.Items) == 0 {
				<div
					class="mt-2"
					hx-trigger={ fmt.Sprintf("click, %s from:document", invoiceItemsEvent(i)) }
					hx-get={ fmt.Sprintf("/invoices/%d/items-details", i.ID) }
					hx-target={ invoiceItemsDetailsTarget(i) }
					hx-swap="outerHTML"
					hx-indicator={ loadInvoiceItemsIndicatorTarget(i) }
				>
					@shared.DefaultButtonOutline("xs") {
						<span id={ loadInvoiceItemsIndicatorID(i) }>
							@shared.LoadingIconSm()
						</span>
						<span>Carregar dados dos produtos</span>
					}
				</div>
			}
		</div>
		<div class="grid grid-cols-1 gap-2">
			for _, item := range i.Items {
				<ul class="grid grid-cols-1 gap-2 rounded border p-4 sm:grid-cols-2">
					<li>
						<strong class="font-medium">Grupo</strong>: <span>{ item.Group } </span>
					</li>
					<li>
						<strong class="font-medium">NCM</strong>: <span>{ item.NCM } </span>
					</li>
					<li>
						<strong class="font-medium">Descrição</strong>: <span>{ item.Description } </span>
					</li>
					<li>
						<strong class="font-medium">Quantidade</strong>: <span>{ utils.Float64ToString(item.Quantity) } </span>
					</li>
					<li>
						<strong class="font-medium">Valor Unitário</strong>: <span>{ utils.Float64ToString(item.ValuePerUnity) } </span>
					</li>
					<li>
						<strong class="font-medium">Origem</strong>: <span>{ item.Origin } </span>
					</li>
					<li>
						<strong class="font-medium">Unidade de medida</strong>: <span>{ item.UnityOfMeasurement } </span>
					</li>
				</ul>
			}
		</div>
	</div>
}

func invoiceCardID(i *models.Invoice) string {
	return fmt.Sprintf("invoice-card-%d", i.ID)
}

func invoiceDetailsID(i *models.Invoice) string {
	return fmt.Sprintf("invoice-details-%d", i.ID)
}

func invoiceDetailsTarget(i *models.Invoice) string {
	return fmt.Sprintf("#invoice-details-%d", i.ID)
}

func invoiceItemsDetailsID(i *models.Invoice) string {
	return fmt.Sprintf("invoice-items-details-%d", i.ID)
}

func invoiceItemsDetailsTarget(i *models.Invoice) string {
	return fmt.Sprintf("#invoice-items-details-%d", i.ID)
}

func invoiceItemsEvent(i *models.Invoice) string {
	return fmt.Sprintf("load-items-%d", i.ID)
}

func loadInvoiceItemsIndicatorID(i *models.Invoice) string {
	return fmt.Sprintf("invoice-items-indicator-%d", i.ID)
}

func loadInvoiceItemsIndicatorTarget(i *models.Invoice) string {
	return fmt.Sprintf("#invoice-items-indicator-%d", i.ID)
}

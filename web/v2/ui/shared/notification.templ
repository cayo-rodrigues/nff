package shared

import "strconv"
import "time"
import "github.com/cayo-rodrigues/nff/web/utils"
import "github.com/cayo-rodrigues/nff/web/models"

templ NotificationBell() {
	<button onclick="ShowNotificationDialog()" class="relative transform rounded-full transition hover:bg-sky-800 active:scale-90 xl:p-2">
		@IconSm("bell")
		@NotificationBang()
	</button>
	@NotificationDialog()
}

templ NotificationBang() {
	<div
		id="notification-bang"
		class="min-w-5 max-w-6 absolute -right-3.5 -top-2 hidden rounded-full bg-red-600 py-0.5 text-center text-xs xl:-right-1.5 xl:-top-0.5"
	>
		!
	</div>
}

templ NotificationDialog() {
	<dialog id="notification-dialog" class="rounded shadow shadow-gray-700">
		<div class="sticky top-0 z-40 flex items-center justify-between border-b bg-gray-100 px-4 py-2">
			<h2 class="text-lg font-bold">Notificações</h2>
			<div onclick="CloseNotificationDialog()">
				@DefaultButtonOutline("xs") {
					@IconSm("x")
				}
			</div>
		</div>
		@NotificationList(getNotificationListItems())
	</dialog>
}

type Notification interface {
	GetStatus() string
	GetOperationType() string
	GetCreatedAt() time.Time
	GetID() int
	GetPageEndpoint() string
}

func getNotificationListItems() []Notification {
	// items will be stored in redis
	m := models.NewMetrics()
	m.ReqStatus = "success"
	m.CreatedAt = time.Now()
	i := models.NewInvoice()
	i.ReqStatus = "error"
	i.CreatedAt = time.Now()
	c := models.NewInvoiceCancel()
	c.ReqStatus = "warning"
	c.CreatedAt = time.Now()
	p := models.NewInvoicePrint()
	p.ReqStatus = "success"
	p.CreatedAt = time.Now()
	return []Notification{m, i, c, p}
}

templ NotificationList[T Notification](items []T) {
	<ul
		hx-get="/get-notifications"
		hx-trigger="sse:metrics-finished, sse:invoice-issue-finished, sse:invoice-cancel-finished, sse:invoice-print-finished"
		hx-target="this"
		hx-swap="outerHTML"
		id="notification-list"
		class="grid grid-cols-1 gap-2 rounded p-2 sm:grid-cols-2 sm:gap-4 lg:grid-cols-3 2xl:grid-cols-4"
	>
		for i, item := range items {
			@NotificationListItem(item, len(items)-i)
		}
	</ul>
}

templ NotificationListItem(n Notification, position int) {
	<li class="relative grid grid-cols-1 gap-2 rounded p-2 shadow shadow-gray-600">
		<span class="absolute -right-1 -top-1 rounded border border-gray-300 bg-gray-100 px-2 py-1">{ strconv.Itoa(position) }</span>
		<h3 class="flex items-center gap-2 truncate rounded border border-gray-300 p-2 text-base font-bold">
			@OperationStatus(n)
		</h3>
		<ul class="grid grid-cols-1 gap-2">
			<li><strong>Tipo:</strong> <span>{ n.GetOperationType() }</span></li>
			<li><strong>Iniciado às:</strong> <span>{ utils.FormatTime(n.GetCreatedAt()) }</span></li>
			<li>
				<a href={ templ.URL(n.GetPageEndpoint()) } target="_blank">
					@DefaultButton("xs") {
						<span>Ver Resultado</span>
						@IconSm("external-link")
					}
				</a>
			</li>
		</ul>
	</li>
}
